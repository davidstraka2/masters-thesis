FROM node:22-alpine AS base

# 1. Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

WORKDIR /app
ENV NODE_ENV=production

# Install dependencies
COPY package.json npm-shrinkwrap.json ./
RUN npm ci --include=dev

# 2. Rebuild the source code only when needed
FROM base AS builder

ARG NEXT_PUBLIC_API
ENV NEXT_PUBLIC_API=${NEXT_PUBLIC_API}
ARG NEXT_PUBLIC_BOOKING_ADDRESS_AT
ENV NEXT_PUBLIC_BOOKING_ADDRESS_AT=${NEXT_PUBLIC_BOOKING_ADDRESS_AT}

WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
COPY .env.template ./
RUN npm run build

# 3. Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static


USER nextjs

EXPOSE 8080

ENV PORT 8080
ENV HOSTNAME 0.0.0.0

CMD ["node", "server.js"]
